Install:
	sh compile.sh

Usage:
	sh meter_gen.sh -h|-help
	  or
	sh meter_gen.sh (-config [configuration file]) (options...)

Needs:
	'-metersNumber [integer]':
		with 'integer' is 1 or more, represent the total number of meter all meter_gen processes will generate

	'-firstDate [YYYY-MM-DDTHH:mm as string]':
		The first date data will be generated at this date

	'-lastDate [YYYY-MM-DDTHH:mm as string]':
		No data will be after this date (if lastDate is exact same time as a data should be generated, it would be the time of the last created)
	lastDate should be after firstDate (or equal if you need exactly 1 data by meter)

	'-interval [integer]':
		Specify the number of minutes between 2 data of the same meter.
		interval should be 1 at minimum

	'-consumptionsFile [.json file]':
		Specify the path to the file containing consumption average and standard deviations

	'-climatFile [.json file]':
		Specity the path to the file containing climats information

	'-profilFile [.json file]':
		Specify the path to the file containing profils information

	'-locationsFile [.json file]':
		Specify the path to the file containing locations information

Options:
	'-config [.json file]':
		specify a file that contains options (metersNumber, firstDate, lastDate, interval, meterTypes and maybe others options)
		You can put -config and specify parameters or options; in this case, the value set in commandline will be taken.
		The config file should be formatted as a JSON file, with keys are options names (without the '-'), and the values are the options parameters.
		ex: {'metersNumber':42, 'firstDate':'2016-12-31T00:00', 'lastDate':'2017-04-05T00:00', 'interval':30, 'meterTypes':'mixed', 'location': true}

		by default, if a ./config.json file exists, it will be loaded as config file. If not, all arguments needs to be specified in command.

	'-maxFileSize [size]':
		will cut generated files such as no file is generated bigger than the given maxFileSize

		maxFilSize parameter is an integer followed by 'k', 'M' or 'G' (like '5G' meaning 5 GigaBytes)
		Note that '-maxFileSize 1M' = '-maxFileSize 1024k',
				  '-maxFileSize 1G' = '-maxFileSize 1024M'
		Minimum: 1k (1 kB)
		Maximum: 8388608G (8,388,608 GB)

	'-firstID [integer]':
		with metersNumber > firstID >= 0, and firstID < lastID
		Meters ID will start from the specified ID
		Example: -firstID 30 > First ID will be METER00030, second will be METER00031 ...

		if no firstID specified, starting with id 0

	'-lastID [integer]':
		with metersNumber >= lastID > 0, and lastID > firstID
		Meters ID will finish at lastID-1
		Example: -lastID 30 > Last generated meter ID will be METER00029

		if no lastID specified, finishing with id (metersNumber -1)

	'-metersType ["electric"/"elec", "gas", "mix"/"mixed"]':
		Specify the meter type for all meters that will be generated.
		for 'mixed' type, there is for each meter a chance to be electric or gas.

		if no metersType option specified, meters will be generated like using 'mixed' type.

	'-temp ([boolean])':
		with boolean is like 'true'/'false' (string ignoring case, or boolean type in json config file)
		add external temperature of meter for each data (Â°C)
		(currently not working, all temperatures will be 20.00)

		Without boolean value, equivalent to '-temp true'
		If no option temp, equivalent to '-temp false'
		If temp option is enabled, -meteoFile should be set

		This option increases execution time proportionally to meters number to generate (lastID - firstID),
		can spent many time and potentially make Javascript Heap memory overflow error (depending on your machine, firstID and lastID options)

	'-meteoFile [.json file]': (useless if not -temp option)
		Specity the path to the file containing meteo information

	'-location ([boolean])':
		with boolean is like 'true'/'false' (string ignoring case, or boolean type in json config file)
		add location information for each data (city name, longitude and latitude of where the meter is)

		Without boolean value, equivalent to '-location true'
		If no option location, equivalent to '-location false'

	'-debug ([boolean])':
		with boolean is like 'true'/'false' (string ignoring case, or boolean type in json config file)
		print information on console while generating (time spent, memory used, current progress).
 
		Without boolean value, equivalent to '-debug true'
		If no option debug, equivalent to '-debug false'

	'-out [file path template]':
		specify the generated files names.

		You can use the following templates in the file name to change depending on the data:
			- '%Y': Generation year (format YYYY like 2017)
			- '%y': Generation year (format YY like 17)
			- '%M': Generation month (format MM like 01 for January to 12 for December)
			- '%D': Generation day of month (format DD like 01 to 31)
			- '%h': Generation hour (format HH like 00 to 23)
			- '%m': Generation minute (format mm like 00 to 59)
			- '%N': File Number (needed when using maxFileSize option)

		When not specified, equivalent to '-out "./%Y-%M-%D_%N.csv"'
		(that will generate files like './2017-12-31_42.csv')

		You can also juste put a folder path, like '-out ./specifiedPath/' (ending '/' needed to know it's a folder path)
		In this case, generated file names will be like './specifiedPath/%Y-%M-%D_%N.csv'.

	'-help' or '-h':
		print this text instead of generating data 